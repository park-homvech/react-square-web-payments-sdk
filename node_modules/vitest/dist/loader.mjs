import { pathToFileURL } from 'url';
import { i as isNodeBuiltin, d as normalizeModuleId } from './chunk-vite-node-utils.7e46948f.mjs';
import './chunk-mock-date.9160e13b.mjs';
import { g as getWorkerState } from './chunk-utils-global.fa20c2f6.mjs';
import 'module';
import 'path';
import 'fs';
import 'assert';
import 'util';
import 'tty';
import 'local-pkg';

const resolve = async (url, context, next) => {
  const { parentURL } = context;
  if (!parentURL || !parentURL.includes("node_modules") || isNodeBuiltin(url))
    return next(url, context, next);
  const id = normalizeModuleId(url);
  const importer = normalizeModuleId(parentURL);
  const state = getWorkerState();
  const resolver = state == null ? void 0 : state.rpc.resolveId;
  if (resolver) {
    const resolved = await resolver(id, importer);
    if (resolved) {
      return {
        url: pathToFileURL(resolved.id).toString(),
        shortCircuit: true
      };
    }
  }
  return next(url, context, next);
};
const load = (url, context, next) => {
  return next(url, context, next);
};

export { load, resolve };
